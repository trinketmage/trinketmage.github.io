(function(){"use strict";var e={8514:function(e,t,r){var o=r(5349),n=r(8797),i=r(750),a=r(9242),s=r(3396);function c(e,t,r,o,n,i){const a=(0,s.up)("HomeView");return(0,s.wg)(),(0,s.j4)(a)}const h={class:"mast-head"},l=(0,s.uE)('<div class="label" data-v-4240f6e0>coming soon..</div><a href="https://github.com/trinketmage/" target="_BLANK" data-v-4240f6e0>github</a><a href="https://stackoverflow.com/users/3382951/nephelococcygia" target="_BLANK" data-v-4240f6e0>stackoverflow</a><a href="https://www.shadertoy.com/user/trinketMage" target="_BLANK" data-v-4240f6e0>shadertoy</a><a href="https://codepen.io/trinketmage" target="_BLANK" data-v-4240f6e0>codepen</a><a href="https://twitter.com/remuemeninge" target="_BLANK" data-v-4240f6e0>x</a><a href="mailto:tranremi@live.fr" target="_BLANK" data-v-4240f6e0>tranremi@live.fr</a>',7),u=[l];function d(e,t,r,o,n,i){return(0,s.wg)(),(0,s.iD)("div",h,u)}var f={},m=r(89);const p=(0,m.Z)(f,[["render",d],["__scopeId","data-v-4240f6e0"]]);var v=p,g={viewport:{width:window.innerWidth,height:window.innerHeight},pixelRatio:Math.min(window.devicePixelRatio,2)},x=r(1114);class y{constructor(){this.mouseMoved=!1,this.coords=new x.FM8,this.coords_old=new x.FM8,this.diff=new x.FM8,this.timer=null,this.count=0}init(){document.body.addEventListener("mousemove",this.onDocumentMouseMove.bind(this),!1),document.body.addEventListener("touchstart",this.onDocumentTouchStart.bind(this),!1),document.body.addEventListener("touchmove",this.onDocumentTouchMove.bind(this),!1)}setCoords(e,t){this.timer&&clearTimeout(this.timer),this.coords.set(e/g.viewport.width*2-1,-t/g.viewport.height*2+1),this.mouseMoved=!0,this.timer=setTimeout((()=>{this.mouseMoved=!1}),100)}onDocumentMouseMove(e){this.setCoords(e.clientX,e.clientY)}onDocumentTouchStart(e){1===e.touches.length&&this.setCoords(e.touches[0].pageX,e.touches[0].pageY)}onDocumentTouchMove(e){1===e.touches.length&&this.setCoords(e.touches[0].pageX,e.touches[0].pageY)}render(){this.diff.subVectors(this.coords,this.coords_old),this.coords_old.copy(this.coords),0===this.coords_old.x&&0===this.coords_old.y&&this.diff.set(0,0)}dispose(){}resize(){}}var w=new y,b=r(7327);class P{constructor(){(0,b.Z)(this,"scene",new x.xsS),this.scene.background=new x.Ilk(199710),this.camera=new x.cPb(50,g.viewport.width/g.viewport.height,.01,100),this.camera.position.z=10}init(){this.renderer=new x.CP7({alpha:!1,stencil:!1,depth:!1,powerPreference:"high-performance",antialias:!1}),document.body.querySelector("#graphics").appendChild(this.renderer.domElement),this.renderer.autoClear=!1,this.renderer.physicallyCorrectLights=!0,this.renderer.toneMapping=x.LY2,this.renderer.setPixelRatio(g.pixelRatio)}render(){this.renderer.render(this.scene,this.camera)}dispose(){this.renderer.dispose()}resize(){g.viewport.width=this.renderer.domElement.parentElement.offsetWidth,g.viewport.height=this.renderer.domElement.parentElement.offsetHeight,this.camera.aspect=g.viewport.width/g.viewport.height,this.camera.updateProjectionMatrix(),this.renderer.setSize(g.viewport.width,g.viewport.height)}}var M=new P,C="#define GLSLIFY 1\n#ifdef USE_ALPHAMAP \n  float threshold = 0.1;\n  vec4 transitionTexel = texture2D( alphaMap, vAlphaMapUv * vec2(1.0) ) + (1.0 - texture2D( map, vMapUv ));\n  transitionTexel *= 0.5;\n  float r = transition * (1.0 + threshold * 2.0) - threshold;\n\n\tfloat mixf = clamp((transitionTexel.g - r)*(1.0/threshold), 0.0, 1.0);\n  if (mixf < 0.001) {\n    discard;\n  }\n  diffuseColor.a *= mixf;\n#endif",R=r(2236),T=r(8964),V=r(4059),L=JSON.parse('{"pages":["Love.png"],"chars":[{"id":201,"index":134,"char":"É","width":69,"height":215,"xoffset":11,"yoffset":12,"xadvance":87,"chnl":15,"x":0,"y":0,"page":0},{"id":84,"index":56,"char":"T","width":74,"height":184,"xoffset":9,"yoffset":43,"xadvance":93,"chnl":15,"x":74,"y":0,"page":0},{"id":82,"index":54,"char":"R","width":132,"height":184,"xoffset":11,"yoffset":43,"xadvance":153,"chnl":15,"x":153,"y":0,"page":0},{"id":65,"index":37,"char":"A","width":77,"height":184,"xoffset":7,"yoffset":43,"xadvance":92,"chnl":15,"x":0,"y":220,"page":0},{"id":78,"index":50,"char":"N","width":73,"height":184,"xoffset":11,"yoffset":43,"xadvance":95,"chnl":15,"x":82,"y":189,"page":0},{"id":77,"index":49,"char":"M","width":103,"height":184,"xoffset":8,"yoffset":43,"xadvance":119,"chnl":15,"x":160,"y":189,"page":0},{"id":73,"index":45,"char":"I","width":27,"height":184,"xoffset":11,"yoffset":43,"xadvance":48,"chnl":15,"x":290,"y":0,"page":0},{"id":32,"index":4,"char":" ","width":0,"height":0,"xoffset":-1,"yoffset":225,"xadvance":58,"chnl":15,"x":74,"y":189,"page":0}],"info":{"face":"Love","size":260,"bold":0,"italic":0,"charset":["T","R","A","N","É","M","I"," "],"unicode":1,"stretchH":100,"smooth":1,"aa":1,"padding":[1,1,1,1],"spacing":[0,0],"outline":0},"common":{"lineHeight":274,"base":225,"scaleW":317,"scaleH":404,"pages":1,"packed":0,"alphaChnl":0,"redChnl":0,"greenChnl":0,"blueChnl":0},"distanceField":{"fieldType":"msdf","distanceRange":3},"kernings":[{"first":84,"second":65,"amount":-16},{"first":84,"second":77,"amount":-9},{"first":82,"second":84,"amount":-3},{"first":82,"second":65,"amount":-4},{"first":82,"second":201,"amount":3},{"first":65,"second":84,"amount":-13},{"first":65,"second":82,"amount":-1},{"first":65,"second":65,"amount":-6},{"first":65,"second":78,"amount":-3},{"first":65,"second":201,"amount":-4},{"first":65,"second":77,"amount":-1},{"first":65,"second":73,"amount":-3},{"first":78,"second":65,"amount":-3},{"first":78,"second":77,"amount":1},{"first":201,"second":84,"amount":3},{"first":201,"second":82,"amount":3},{"first":201,"second":65,"amount":8},{"first":77,"second":84,"amount":-9},{"first":77,"second":65,"amount":-3},{"first":77,"second":78,"amount":1},{"first":73,"second":82,"amount":3},{"first":73,"second":65,"amount":-4}]}'),_=class{constructor(){const{scene:e,camera:t,renderer:r}=M;this.scene=e,this.renderer=r,this.camera=t,this.geometry=new x.xo$(1,64,64),this.lights=new x.ZAu;const o=10;for(let u=0;u<8;u++){var n=new x.Ox3(16777215,1/8);if(Math.random()>.5)n.position.set(x.M8C.randFloatSpread(o),x.M8C.randFloatSpread(o),x.M8C.randFloatSpread(o));else{let e=Math.acos(2*Math.random()-1)-Math.PI/2,t=2*Math.PI*Math.random();n.position.set(Math.cos(e)*Math.cos(t)*length,Math.abs(Math.cos(e)*Math.sin(t)*length),Math.sin(e)*length)}}this.scene.add(this.lights),this.init();const i=new x.dpR,a=i.load("/assets/map.png"),s=i.load("/assets/transition4.png");this.material=new x.Wid({color:new x.Ilk(14329120),metalness:1,roughness:.15,roughnessMap:a,normalMap:null,normalScale:new x.FM8(.1,.1),envMap:this.textureCube,map:a,alphaMap:s,transparent:!0,userData:{transition:{value:1}}}),this.material.normalMap=new x.ROQ(new T.G,x.xfE,x.rpg,x.rpg),this.material.normalMap.repeat.set(40,40),this.material.onBeforeCompile=e=>{e.uniforms.transition=this.material.userData.transition,e.fragmentShader="uniform float transition;\n"+e.fragmentShader,e.fragmentShader=e.fragmentShader.replace("#include <alphamap_fragment>",C)},this.sphere=new x.Kj0(this.geometry,this.material),this.sphere.rotation.y=4.9675,this.sphere.rotation.x=.875,this.sphere.scale.set(2.7,2.7,2.7),this.sphere.updateMatrix(),e.add(this.sphere),this.glyph=new V.rZ({text:"RÉMI TRAN",font:L,map:i.load("/assets/Love.png"),color:new x.Ilk(199710),letterSpacing:10,addons:{progress:!0,shaderChunks:{position_pars_vertex:"\n            // https://github.com/glslify/glsl-easings/\n            float quadraticOut(float t) {\n              return -t * (t - 2.0);\n            }\n            float cubicOut(float t) {\n              float f = t - 1.0;\n              return f * f * f + 1.0;\n            }\n            uniform mat4 modelMatrix;\n            uniform mat3 normalMatrix;\n            uniform vec3 cameraPosition;\n\n            in vec3 normal;\n\n            out vec3 worldNormal;\n            out vec3 eyeVector;\n          ",transformed_vertex:"\n            vec4 worldPos = modelMatrix * vec4(position.xyz, 1.0);\n\n            transformed.x += 260.0 * 0.5 * (1.0 - quadraticOut(vProgress));\n            transformed.z += 260.0 * (1.0 - cubicOut(vProgress));\n\n            vec3 transformedNormal = normalMatrix * normal;\n            worldNormal = normalize(transformedNormal);\n\n            eyeVector = normalize(worldPos.xyz - cameraPosition);\n          ",color_pars_fragment:"\n            uniform vec3 color;\n            uniform vec2 resolution;\n            uniform vec3 cameraPosition;\n            uniform sampler2D uTexture;\n\n            uniform vec3 uLight;\n            uniform float uShininess;\n            uniform float uDiffuseness;\n\n            uniform float uIorR;\n            uniform float uIorY;\n            uniform float uIorG;\n            uniform float uIorC;\n            uniform float uIorB;\n            uniform float uIorP;\n\n            uniform float uRefractPower;\n            uniform float uChromaticAberration;\n            uniform float uSaturation;\n\n\n            in vec3 worldNormal;\n            in vec3 eyeVector;\n            \n            // https://github.com/mrdoob/three.js/blob/205e345b4f48f8b560b3b35391fd914cba1997a0/src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl.js#L20-L22\n            vec4 LinearTosRGB( in vec4 value ) {\n              return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n            }\n\n            vec3 sat(vec3 rgb, float adjustment) {\n              const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n              vec3 intensity = vec3(dot(rgb, W));\n              return mix(intensity, rgb, adjustment);\n            }\n\n            float specular(vec3 light, float shininess, float diffuseness) {\n              vec3 normal = worldNormal;\n              vec3 lightVector = normalize(-light);\n              vec3 halfVector = normalize(eyeVector + lightVector);\n\n              float NdotL = dot(normal, lightVector);\n              float NdotH =  dot(normal, halfVector);\n              float kDiffuse = max(0.0, NdotL);\n              float NdotH2 = NdotH * NdotH;\n\n              float kSpecular = pow(NdotH2, shininess);\n              return  kSpecular + kDiffuse * diffuseness;\n            }\n            const int LOOP = 16;\n          ",color_fragment:"\n            float iorRatio = 1.0/1.31;\n            vec2 uv = gl_FragCoord.xy / resolution.xy;\n            vec3 normal = worldNormal;\n\n            vec3 color = vec3(0.0);\n\n            for ( int i = 0; i < LOOP; i ++ ) {\n              float slide = float(i) / float(LOOP) * 0.1;\n          \n              vec3 refractVecR = refract(eyeVector, normal,(1.0/uIorR));\n              vec3 refractVecY = refract(eyeVector, normal, (1.0/uIorY));\n              vec3 refractVecG = refract(eyeVector, normal, (1.0/uIorG));\n              vec3 refractVecC = refract(eyeVector, normal, (1.0/uIorC));\n              vec3 refractVecB = refract(eyeVector, normal, (1.0/uIorB));\n              vec3 refractVecP = refract(eyeVector, normal, (1.0/uIorP));\n          \n              float r = texture(uTexture, uv + refractVecR.xy * (uRefractPower + slide * 1.0) * uChromaticAberration).x * 0.5;\n          \n              float y = (texture(uTexture, uv + refractVecY.xy * (uRefractPower + slide * 1.0) * uChromaticAberration).x * 2.0 +\n                          texture(uTexture, uv + refractVecY.xy * (uRefractPower + slide * 1.0) * uChromaticAberration).y * 2.0 -\n                          texture(uTexture, uv + refractVecY.xy * (uRefractPower + slide * 1.0) * uChromaticAberration).z) / 6.0;\n          \n              float g = texture(uTexture, uv + refractVecG.xy * (uRefractPower + slide * 2.0) * uChromaticAberration).y * 0.5;\n          \n              float c = (texture(uTexture, uv + refractVecC.xy * (uRefractPower + slide * 2.5) * uChromaticAberration).y * 2.0 +\n                          texture(uTexture, uv + refractVecC.xy * (uRefractPower + slide * 2.5) * uChromaticAberration).z * 2.0 -\n                          texture(uTexture, uv + refractVecC.xy * (uRefractPower + slide * 2.5) * uChromaticAberration).x) / 6.0;\n                    \n              float b = texture(uTexture, uv + refractVecB.xy * (uRefractPower + slide * 3.0) * uChromaticAberration).z * 0.5;\n          \n              float p = (texture(uTexture, uv + refractVecP.xy * (uRefractPower + slide * 1.0) * uChromaticAberration).z * 2.0 +\n                          texture(uTexture, uv + refractVecP.xy * (uRefractPower + slide * 1.0) * uChromaticAberration).x * 2.0 -\n                          texture(uTexture, uv + refractVecP.xy * (uRefractPower + slide * 1.0) * uChromaticAberration).y) / 6.0;\n          \n              float R = r + (2.0*p + 2.0*y - c)/3.0;\n              float G = g + (2.0*y + 2.0*c - p)/3.0;\n              float B = b + (2.0*c + 2.0*p - y)/3.0;\n          \n              color.r += R;\n              color.g += G;\n              color.b += B;\n          \n              // color = sat(color, uSaturation);\n            }\n\n\n            // vec3 refractVec = refract(eyeVector, normal, iorRatio);\n            // diffuseColor = texture(uTexture, uv).rgb;\n            // diffuseColor = vec3(0.5, 0.5, 1.0) - texture(uTexture, uv + refractVec.xy).rgb;\n            // diffuseColor = LinearTosRGB(texture(uTexture, uv + refractVec.xy)).rgb;\n            // diffuseColor = LinearTosRGB(vec4(color, 1.0)).rgb;\n            diffuseColor = color;\n\n            float specularLight = specular(uLight, uShininess, uDiffuseness);\n            diffuseColor += specularLight;\n          ",alpha_fragment:"alpha *= vProgress * opacity;"}}}),this.glyph.mesh.frustumCulled=!1,this.glyph.scale.set(.0075,.0075,.0075),this.glyph.center(),this.glyph.children[0].geometry.computeVertexNormals(),this.glyph.position.z=2.75,this.glyph.material.uniforms.progress.value=0,this.glyph.material.uniforms.uTexture={value:null},this.glyph.material.uniforms.resolution={value:new x.FM8(g.viewport.width*g.pixelRatio,g.viewport.height*g.pixelRatio)},this.glyph.material.uniforms.uLight={value:new x.Pa4(-.5,4,10)},this.glyph.material.uniforms.uDiffuseness={value:.2},this.glyph.material.uniforms.uShininess={value:40},this.glyph.material.uniforms.uIorR={value:1.15},this.glyph.material.uniforms.uIorY={value:1.16},this.glyph.material.uniforms.uIorG={value:1.18},this.glyph.material.uniforms.uIorC={value:1.22},this.glyph.material.uniforms.uIorB={value:1.22},this.glyph.material.uniforms.uIorP={value:1.22},this.glyph.material.uniforms.uSaturation={value:1.14},this.glyph.material.uniforms.uChromaticAberration={value:.5},this.glyph.material.uniforms.uRefractPower={value:.25},e.add(this.glyph);const c=new x._12(1,1),h=new x.vBJ({color:16777215}),l=new x.Kj0(c,h);this.plane=l,l.position.x=5}init(){this.textureCube=(new R.x).setPath("/assets/").load("potsdamer_platz_1k_11zon.hdr",(e=>{e.mapping=x.dSO;const t={x:0,z:1},r=new o.ZP.timeline;r.to(t,{z:0,duration:2.5,yoyo:!0,ease:"linear",onUpdate:()=>{this.material.userData.transition.value=t.z}},"a"),r.to(t,{x:1,duration:1.5,ease:"linear",onUpdate:()=>{this.glyph.material.uniforms.progress.value=t.x}},"a+=1.5")}))}render(){}dispose(){this.sphere.geometry.dispose(),this.sphere.material.dispose(),M.scene.remove(this.sphere),M.scene.remove(this.lights),M.scene.remove(this.text),this.glyph.geometry.dispose(),this.glyph.material.dispose(),M.scene.remove(this.glyph)}resize(){this.glyph.material.uniforms.resolution.value.set(g.viewport.width*g.pixelRatio,g.viewport.height*g.pixelRatio)}},z=r(8291);class S{constructor(){(0,b.Z)(this,"components",{}),(0,b.Z)(this,"postProcess",!1),(0,b.Z)(this,"proxy",document.createElement("div")),(0,b.Z)(this,"variables",{rotationY:4.9675}),(0,b.Z)(this,"startProgress",0),(0,b.Z)(this,"progressWrap",o.ZP.utils.wrap(0,1)),(0,b.Z)(this,"spin",o.ZP.fromTo(this.variables,{rotationY:6.28},{paused:!0,rotationY:0,duration:20,ease:"none",repeat:-1})),this.init()}init(){let{spin:e,startProgress:t,progressWrap:r,variables:i}=this;this.components.atlas=new _,this.target=new x.dd2(g.viewport.width*g.pixelRatio,g.viewport.height*g.pixelRatio,{minFilter:x.wem,magFilter:x.wem,type:x.cLu}),e.progress(1.3125/6.28);const a=3e3,s=()=>{let o=t+(c[0].startX-c[0].x)/a;e.progress(r(o)),this.components.atlas.sphere.rotation.y=i.rotationY},c=n.Z.create(this.proxy,{trigger:document.body,type:"x",inertia:!0,allowNativeTouchScrolling:!0,onPress(){o.ZP.killTweensOf(e),e.timeScale(0),t=e.progress()},onDrag:s,onThrowUpdate:s})}render(e,t){const r=1;z.Ui.damp3(M.camera.position,[5*Math.sin(-w.coords.x)*.25,3.5*w.coords.y*.25,(7.5+2.5*Math.cos(w.coords.x))*r],.2,t/1e3),M.camera.lookAt(0,0,0),Object.keys(this.components).forEach((t=>{this.components[t].render(e)})),this.components.atlas.glyph.visible=!1,M.renderer.setRenderTarget(this.target),M.render(),this.target.texture.colorSpace=x.GUF,this.components.atlas.glyph.children[0].material.uniforms.uTexture.value=this.target.texture,this.components.atlas.glyph.visible=!0,M.renderer.setRenderTarget(null),M.render()}dispose(){Object.keys(this.components).forEach((e=>{this.components[e].dispose()})),this.target.dispose()}resize(){Object.keys(this.components).forEach((e=>{this.components[e].resize()})),this.target.setSize(g.viewport.width*g.pixelRatio,g.viewport.height*g.pixelRatio)}}var A=class{constructor(){w.init(),M.init(),this.output=new S,this.init()}init(){this.resize(),this.x=this.resize.bind(this),window.addEventListener("resize",this.x,!1),o.ZP.ticker.add(this.render.bind(this))}render(e,t){w.render(e,t),this.output.render(e,t)}resize(){w.resize(),M.resize(),this.output.resize()}destroy(){window.removeEventListener("resize",this.x),w.dispose(),M.dispose(),this.output.dispose()}},k={components:{HomeView:v},setup(){let e=null;(0,s.bv)((()=>{e=new A})),(0,s.Ah)((()=>{e.destroy()}))}};const O=(0,m.Z)(k,[["render",c]]);var I=O;o.ZP.registerPlugin(n.Z,i.ZP),(0,a.ri)(I).mount("#app")}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,r),i.exports}r.m=e,function(){var e=[];r.O=function(t,o,n,i){if(!o){var a=1/0;for(l=0;l<e.length;l++){o=e[l][0],n=e[l][1],i=e[l][2];for(var s=!0,c=0;c<o.length;c++)(!1&i||a>=i)&&Object.keys(r.O).every((function(e){return r.O[e](o[c])}))?o.splice(c--,1):(s=!1,i<a&&(a=i));if(s){e.splice(l--,1);var h=n();void 0!==h&&(t=h)}}return t}i=i||0;for(var l=e.length;l>0&&e[l-1][2]>i;l--)e[l]=e[l-1];e[l]=[o,n,i]}}(),function(){r.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return r.d(t,{a:t}),t}}(),function(){r.d=function(e,t){for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}}(),function(){r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={143:0};r.O.j=function(t){return 0===e[t]};var t=function(t,o){var n,i,a=o[0],s=o[1],c=o[2],h=0;if(a.some((function(t){return 0!==e[t]}))){for(n in s)r.o(s,n)&&(r.m[n]=s[n]);if(c)var l=c(r)}for(t&&t(o);h<a.length;h++)i=a[h],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(l)},o=self["webpackChunkvue_three_boilerplate"]=self["webpackChunkvue_three_boilerplate"]||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))}();var o=r.O(void 0,[998],(function(){return r(8514)}));o=r.O(o)})();
//# sourceMappingURL=app.364fa689.js.map